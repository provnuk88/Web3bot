/**
 * Web3 Guild Bot - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * Telegram –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ event loop, error handling
 */

const { Telegraf, Markup, session } = require('telegraf');
const { message } = require('telegraf/filters');
const mongoose = require('mongoose');
const config = require('./config');
require('dotenv').config();

// –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π MongoDB
mongoose.set('maxTimeMS', 5000); // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/web3_guild_bot', {
  maxPoolSize: 10,
  serverSelectionTimeoutMS: 5000,
  socketTimeoutMS: 45000,
  bufferCommands: false,
  bufferMaxEntries: 0
})
  .then(() => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// ==================== –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• ====================

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  user_id: { type: Number, required: true, unique: true, index: true },
  username: { type: String, default: null, index: true },
  first_name: { type: String, default: '' },
  points: { type: Number, default: 0, index: true },
  level: { type: Number, default: 1 },
  warnings: { type: Number, default: 0 },
  is_muted: { type: Boolean, default: false, index: true },
  mute_until: { type: Date, default: null },
  is_banned: { type: Boolean, default: false, index: true },
  captcha_verified: { type: Boolean, default: false },
  captcha_answer: { type: Number, default: null },
  captcha_message_id: { type: Number, default: null },
  join_date: { type: Date, default: Date.now },
  last_activity: { type: Date, default: Date.now, index: true },
  messages_count: { type: Number, default: 0 }
});

// –°—Ö–µ–º–∞ –ª–æ–≥–æ–≤
const logSchema = new mongoose.Schema({
  user_id: { type: Number, required: true, index: true },
  admin_id: { type: Number, required: true },
  action: { type: String, required: true, index: true },
  reason: { type: String, default: '' },
  timestamp: { type: Date, default: Date.now, index: true },
  details: { type: mongoose.Schema.Types.Mixed, default: {} }
});

// –°—Ö–µ–º–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const pendingMessageSchema = new mongoose.Schema({
  user_id: { type: Number, required: true, index: true },
  username: { type: String, default: '' },
  first_name: { type: String, default: '' },
  message_text: { type: String, required: true },
  message_type: { type: String, default: 'text' },
  chat_id: { type: Number, required: true },
  created_at: { type: Date, default: Date.now },
  expires_at: { 
    type: Date, 
    default: () => new Date(Date.now() + config.moderation.pendingMessageHours * 60 * 60 * 1000),
    index: true
  }
});

const User = mongoose.model('User', userSchema);
const Log = mongoose.model('Log', logSchema);
const PendingMessage = mongoose.model('PendingMessage', pendingMessageSchema);

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(async () => {
  try {
    const deleted = await PendingMessage.deleteMany({ expires_at: { $lt: new Date() } }).maxTimeMS(5000);
    if (deleted.deletedCount > 0) {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deleted.deletedCount} –∏—Å—Ç—ë–∫—à–∏—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç—ë–∫—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
  }
}, 60 * 60 * 1000);

// ==================== MIDDLEWARE ====================
// –£–±–∏—Ä–∞–µ–º session - –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
// bot.use(session());

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
bot.use(async (ctx, next) => {
  const start = Date.now();
  try {
    await next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ middleware:', error);
  } finally {
    const ms = Date.now() - start;
    if (ms > 1000) { // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      console.log(`‚è±Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${ms}ms`);
    }
  }
});

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í ====================
bot.on(message('new_chat_members'), async (ctx) => {
  const newMembers = ctx.message.new_chat_members;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è
  for (const member of newMembers) {
    if (member.is_bot) continue;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º setImmediate –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    setImmediate(async () => {
      try {
        await User.findOneAndUpdate(
          { user_id: member.id },
          {
            user_id: member.id,
            username: member.username || null,
            first_name: member.first_name || '',
            join_date: new Date(),
            last_activity: new Date()
          },
          { upsert: true, maxTimeMS: 3000 }
        );

        console.log(`‚ûï –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: ${member.first_name} (@${member.username || '–Ω–µ—Ç'}, ID: ${member.id})`);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
      }
    });
  }
});

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================
bot.on(message('text'), async (ctx) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ –∏ –æ—Ç –±–æ—Ç–æ–≤
  if (ctx.chat.type === 'private' || ctx.from.is_bot) return;
  
  const userId = ctx.from.id;
  const text = ctx.message.text;
  const messageId = ctx.message.message_id;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º try-catch —Å timeout
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å timeout
    let userData = await Promise.race([
      User.findOne({ user_id: userId }),
      new Promise((_, reject) => setTimeout(() => reject(new Error('DB timeout')), 3000))
    ]);
    
    if (!userData) {
      userData = new User({
        user_id: userId,
        username: ctx.from.username || null,
        first_name: ctx.from.first_name || '',
        join_date: new Date(),
        last_activity: new Date()
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setImmediate(async () => {
        try {
          await userData.save();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–∞–ø—á–∏
    if (!userData.captcha_verified) {
      await ctx.deleteMessage(messageId).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setImmediate(() => savePendingMessage(userId, ctx.from.username || '', ctx.from.first_name || '', text, ctx.chat.id));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É
      await showCaptcha(ctx, ctx.from);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const isAdminUser = await isAdmin(ctx, userId);
    
    if (!isAdminUser) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
      if (checkProfanity(text)) { // –î–µ–ª–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
        await handleViolation(ctx, userData, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏', messageId);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ–Ω–µ–µ 14 –¥–Ω–µ–π)
      const daysSinceJoin = (new Date() - userData.join_date) / (1000 * 60 * 60 * 24);
      if (daysSinceJoin < config.moderation.linkRestrictionDays) {
        if (hasLinks(text)) {
          await ctx.deleteMessage(messageId).catch(() => {});
          
          const daysLeft = Math.ceil(config.moderation.linkRestrictionDays - daysSinceJoin);
          const restrictMsg = await ctx.reply(
            `‚ö†Ô∏è @${ctx.from.username || ctx.from.first_name}, —Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ.`,
            { reply_to_message_id: messageId }
          ).catch(() => null);
          
          if (restrictMsg) {
            deleteMessageLater(ctx, restrictMsg.message_id, 30);
          }
          return;
        }
      }
    }
    
    // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    if (text.split(' ').length >= 3) {
      setImmediate(() => updateUserPoints(userData, config.pointsSettings.message, '–°–æ–æ–±—â–µ–Ω–∏–µ'));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    setImmediate(async () => {
      try {
        await User.updateOne(
          { user_id: userId },
          { 
            last_activity: new Date(),
            $inc: { messages_count: 1 }
          },
          { maxTimeMS: 2000 }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
});

// ==================== –§–£–ù–ö–¶–ò–Ø –ü–û–ö–ê–ó–ê CAPTCHA ====================
async function showCaptcha(ctx, user) {
  try {
    const num1 = Math.floor(Math.random() * 10) + 1;
    const num2 = Math.floor(Math.random() * 10) + 1;
    const correctAnswer = num1 + num2;

    const captchaText = `üîê @${user.username || user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n` +
      `–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Ä–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:\n` +
      `**${num1} + ${num2} = ?**\n\n` +
      `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.`;

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('1', `captcha_${user.id}_1`),
        Markup.button.callback('5', `captcha_${user.id}_5`),
        Markup.button.callback(`${correctAnswer}`, `captcha_${user.id}_${correctAnswer}`),
        Markup.button.callback('15', `captcha_${user.id}_15`)
      ],
      [
        Markup.button.callback('7', `captcha_${user.id}_7`),
        Markup.button.callback('21', `captcha_${user.id}_21`),
        Markup.button.callback('9', `captcha_${user.id}_9`),
        Markup.button.callback('12', `captcha_${user.id}_12`)
      ]
    ]);

    const captchaMsg = await ctx.reply(captchaText, keyboard);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    setImmediate(async () => {
      try {
        await User.findOneAndUpdate(
          { user_id: user.id },
          { 
            captcha_answer: correctAnswer,
            captcha_message_id: captchaMsg.message_id
          },
          { maxTimeMS: 2000 }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ø—á–∏:', error);
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞–ø—á–∏:', error);
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK –ö–ù–û–ü–û–ö CAPTCHA ====================
bot.action(/captcha_(\d+)_(\d+)/, async (ctx) => {
  const userId = parseInt(ctx.match[1]);
  const userAnswer = parseInt(ctx.match[2]);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–≤–æ—é –∫–∞–ø—á—É
  if (ctx.from.id !== userId) {
    await ctx.answerCbQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–∞–ø—á–∞!').catch(() => {});
    return;
  }
  
  try {
    const userData = await Promise.race([
      User.findOne({ user_id: userId }),
      new Promise((_, reject) => setTimeout(() => reject(new Error('DB timeout')), 2000))
    ]);
    
    if (!userData) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω').catch(() => {});
      return;
    }

    if (userData.captcha_verified) {
      await ctx.answerCbQuery('‚úÖ –í—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!').catch(() => {});
      return;
    }

    if (userAnswer === userData.captcha_answer) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      userData.captcha_verified = true;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setImmediate(async () => {
        try {
          await userData.save();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        }
      });

      await ctx.answerCbQuery('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!').catch(() => {});
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
      await ctx.deleteMessage().catch(() => {});

      // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setImmediate(() => publishPendingMessage(ctx, userId));

      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      const welcomeMsg = await ctx.reply(
        `üéâ @${ctx.from.username || ctx.from.first_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö!`
      ).catch(() => null);
      
      if (welcomeMsg) {
        deleteMessageLater(ctx, welcomeMsg.message_id, 60);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setImmediate(() => logAction(userId, 0, 'captcha_passed', '–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É'));
      
      console.log(`‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: ${ctx.from.first_name} (ID: ${userId})`);
      
    } else {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      await ctx.answerCbQuery('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.').catch(() => {});
      console.log(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–ø—á–∏: ${ctx.from.first_name} (ID: ${userId}), –æ—Ç–≤–µ—Ç–∏–ª ${userAnswer}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${userData.captcha_answer}`);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ø—á–∏:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞').catch(() => {});
  }
});

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–¢–õ–û–ñ–ï–ù–ù–´–ú–ò –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò ====================
async function savePendingMessage(userId, username, firstName, messageText, chatId) {
  try {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await PendingMessage.deleteMany({ user_id: userId }).maxTimeMS(2000);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const pendingMessage = new PendingMessage({
      user_id: userId,
      username: username,
      first_name: firstName,
      message_text: messageText,
      chat_id: chatId
    });
    
    await pendingMessage.save();
    console.log(`üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫: ${firstName} (ID: ${userId})`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

async function publishPendingMessage(ctx, userId) {
  try {
    const pendingMessage = await PendingMessage.findOne({ user_id: userId }).maxTimeMS(2000);
    
    if (pendingMessage) {
      // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(
        `üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${pendingMessage.username || pendingMessage.first_name}:\n\n${pendingMessage.message_text}`
      ).catch(() => {});
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setImmediate(async () => {
        try {
          await PendingMessage.deleteOne({ user_id: userId });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
        }
      });
      
      console.log(`üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${pendingMessage.first_name} (ID: ${userId})`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–æ–∫ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
function hasLinks(text) {
  const urlPatterns = [
    /https?:\/\/[^\s]+/gi,           // http://site.com
    /www\.[^\s]+/gi,                 // www.site.com  
    /t\.me\/[^\s]+/gi,               // t.me/channel
    /@[a-zA-Z0-9_]+\.(?:com|org|net|io|co|ru|tv|me|bot)/gi  // email@site.com
  ];
  
  return urlPatterns.some(pattern => pattern.test(text));
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –º–∞—Ç (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
function checkProfanity(text) {
  const lowerText = text.toLowerCase();
  return config.blacklistWords.some(word => lowerText.includes(word));
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
async function handleViolation(ctx, userData, reason, messageId) {
  try {
    // –£–¥–∞–ª—è–µ–º –Ω–∞—Ä—É—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.deleteMessage(messageId).catch(() => {});
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    userData.warnings += 1;
    
    // –®—Ç—Ä–∞—Ñ–Ω—ã–µ –±–∞–ª–ª—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    setImmediate(() => updateUserPoints(userData, config.pointsSettings.spamPenalty, reason));
    
    if (userData.warnings >= config.moderation.warningThreshold) {
      // –ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const muteUntil = new Date(Date.now() + config.moderation.muteDurationMinutes * 60 * 1000);
      userData.is_muted = true;
      userData.mute_until = muteUntil;
      userData.warnings = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –º—É—Ç–∞
      
      await ctx.restrictChatMember(userData.user_id, {
        permissions: { can_send_messages: false },
        until_date: Math.floor(muteUntil.getTime() / 1000)
      }).catch(() => {});
      
      const muteMsg = await ctx.reply(
        `üîá @${ctx.from.username || ctx.from.first_name} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ ${config.moderation.muteDurationMinutes} –º–∏–Ω—É—Ç –∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è.`
      ).catch(() => null);
      
      if (muteMsg) {
        deleteMessageLater(ctx, muteMsg.message_id, config.moderation.autoDeleteMinutes * 60);
      }
      
      setImmediate(() => logAction(userData.user_id, 0, 'mute', `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º—É—Ç –∑–∞ ${reason}`));
      
    } else {
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      const warningsLeft = config.moderation.warningThreshold - userData.warnings;
      const warningMsg = await ctx.reply(
        `‚ö†Ô∏è @${ctx.from.username || ctx.from.first_name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞: ${reason}\n` +
        `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${userData.warnings}/${config.moderation.warningThreshold}\n` +
        `–î–æ –º—É—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å: ${warningsLeft}`,
        { reply_to_message_id: messageId }
      ).catch(() => null);
      
      if (warningMsg) {
        deleteMessageLater(ctx, warningMsg.message_id, config.moderation.autoDeleteMinutes * 60);
      }
      
      setImmediate(() => logAction(userData.user_id, 0, 'warning', reason));
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    setImmediate(async () => {
      try {
        await userData.save();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è:', error);
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è)
async function updateUserPoints(userData, points, reason) {
  try {
    const oldPoints = userData.points;
    
    userData.points += points;
    
    // –ù–µ –¥–∞—ë–º –±–∞–ª–ª–∞–º —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å
    if (userData.points < 0) {
      userData.points = 0;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    userData.level = calculateLevel(userData.points);
    
    await userData.save();
    
    console.log(`üíé ${userData.first_name}: ${points > 0 ? '+' : ''}${points} –±–∞–ª–ª–æ–≤ –∑–∞ ${reason} (${oldPoints} ‚Üí ${userData.points})`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —É—Ä–æ–≤–Ω—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
function calculateLevel(points) {
  for (let i = config.levelThresholds.length - 1; i >= 0; i--) {
    if (points >= config.levelThresholds[i].points) {
      return config.levelThresholds[i].level;
    }
  }
  return 1;
}

// –ö–µ—à –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–∏–∑–±–µ–≥–∞–µ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API)
const adminCache = new Map();
const ADMIN_CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function isAdmin(ctx, userId) {
  const cacheKey = `${ctx.chat.id}_${userId}`;
  const cached = adminCache.get(cacheKey);
  
  if (cached && Date.now() - cached.timestamp < ADMIN_CACHE_TTL) {
    return cached.isAdmin;
  }
  
  try {
    const member = await ctx.getChatMember(userId);
    const isAdminResult = ['creator', 'administrator'].includes(member.status);
    
    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    adminCache.set(cacheKey, {
      isAdmin: isAdminResult,
      timestamp: Date.now()
    });
    
    return isAdminResult;
  } catch (error) {
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ –∞–¥–º–∏–Ω–æ–º
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function deleteMessageLater(ctx, messageId, delaySeconds) {
  setTimeout(async () => {
    try {
      await ctx.deleteMessage(messageId);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    }
  }, delaySeconds * 1000);
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
async function logAction(userId, adminId, action, reason, details = {}) {
  try {
    const log = new Log({
      user_id: userId,
      admin_id: adminId,
      action: action,
      reason: reason,
      details: details
    });
    await log.save();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

// –ö–æ–º–∞–Ω–¥–∞ start
bot.command('start', async (ctx) => {
  try {
    const isGroup = ctx.chat.type !== 'private';
    
    if (isGroup) {
      const welcomeMsg = await ctx.reply(
        'ü§ñ **Web3 Guild Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n' +
        'üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è\n' +
        'üéÆ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –±–∞–ª–ª–æ–≤\n' +
        'üîê CAPTCHA –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'
      );
      
      deleteMessageLater(ctx, welcomeMsg.message_id, 60);
    } else {
      await ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø Web3 Guild Bot.\n\n' +
        'üéØ **–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:**\n' +
        '‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —á–∞—Ç–∞\n' +
        '‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π\n' +
        '‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞\n' +
        '‚Ä¢ CAPTCHA –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n' +
        '–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start:', error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ help
bot.command('help', async (ctx) => {
  try {
    const isAdminUser = await isAdmin(ctx, ctx.from.id);
    
    let helpText = 'üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n' +
      'üë§ **–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n' +
      '/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
      '/top - —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' +
      '/rules - –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n\n';
    
    if (isAdminUser) {
      helpText += 'üõ°Ô∏è **–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n' +
        '/warn @user [–ø—Ä–∏—á–∏–Ω–∞] - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n' +
        '/mute @user [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞] - –º—É—Ç\n' +
        '/ban @user [–ø—Ä–∏—á–∏–Ω–∞] - –±–∞–Ω\n' +
        '/unwarn @user - —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n' +
        '/unmute @user - —Å–Ω—è—Ç—å –º—É—Ç\n' +
        '/addpoints @user [–±–∞–ª–ª—ã] - –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã\n' +
        '/setlevel @user [—É—Ä–æ–≤–µ–Ω—å] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å';
    }
    
    const helpMsg = await ctx.reply(helpText);
    deleteMessageLater(ctx, helpMsg.message_id, 120);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã help:', error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ rules
bot.command('rules', async (ctx) => {
  try {
    const rulesMsg = await ctx.reply(
      'üìú **–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:**\n\n' +
      '1. üö´ –ó–∞–ø—Ä–µ—â—ë–Ω –º–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è\n' +
      '2. üîó –°—Å—ã–ª–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞\n' +
      '3. ü§ñ –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç CAPTCHA\n' +
      '4. üí¨ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã\n' +
      '5. üìà –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n' +
      '‚ö†Ô∏è –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤—ã–¥–∞—é—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n' +
      'üîá 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è = –º—É—Ç –Ω–∞ 1 —á–∞—Å'
    );
    
    deleteMessageLater(ctx, rulesMsg.message_id, 180);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã rules:', error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ stats
bot.command('stats', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userData = await Promise.race([
      User.findOne({ user_id: userId }),
      new Promise((_, reject) => setTimeout(() => reject(new Error('DB timeout')), 3000))
    ]);
    
    if (!userData) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
      return;
    }
    
    const levelName = config.levelNames[userData.level] || `–£—Ä–æ–≤–µ–Ω—å ${userData.level}`;
    const nextLevel = userData.level + 1;
    const nextLevelThreshold = config.levelThresholds.find(t => t.level === nextLevel);
    const pointsToNext = nextLevelThreshold ? nextLevelThreshold.points - userData.points : 0;
    
    const statsText = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @${ctx.from.username || ctx.from.first_name}:**\n\n` +
      `‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${userData.level} - ${levelName}\n` +
      `üíé –ë–∞–ª–ª—ã: ${userData.points}\n` +
      `üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${userData.messages_count}\n` +
      `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${userData.warnings}/${config.moderation.warningThreshold}\n` +
      `üìÖ –í –≥—Ä—É–ø–ø–µ —Å: ${userData.join_date.toLocaleDateString('ru-RU')}\n` +
      `üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${userData.last_activity.toLocaleDateString('ru-RU')}\n\n` +
      (pointsToNext > 0 ? `üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${pointsToNext} –±–∞–ª–ª–æ–≤` : 'üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!');
    
    const statsMsg = await ctx.reply(statsText);
    deleteMessageLater(ctx, statsMsg.message_id, 120);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã stats:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ top
bot.command('top', async (ctx) => {
  try {
    const topUsers = await Promise.race([
      User.find({ is_banned: false }).sort({ points: -1 }).limit(10),
      new Promise((_, reject) => setTimeout(() => reject(new Error('DB timeout')), 3000))
    ]);
    
    if (topUsers.length === 0) {
      await ctx.reply('üìä –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      return;
    }
    
    let topText = 'üèÜ **–¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n\n';
    
    topUsers.forEach((user, index) => {
      const medal = ['ü•á', 'ü•à', 'ü•â'][index] || `${index + 1}.`;
      const levelName = config.levelNames[user.level] || `Lvl ${user.level}`;
      topText += `${medal} @${user.username || user.first_name} - ${user.points}üíé (${levelName})\n`;
    });
    
    const topMsg = await ctx.reply(topText);
    deleteMessageLater(ctx, topMsg.message_id, 180);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã top:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞.');
  }
});

// ==================== –ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò ====================

// –ö–æ–º–∞–Ω–¥–∞ warn
bot.command('warn', async (ctx) => {
  try {
    if (!await isAdmin(ctx, ctx.from.id)) {
      return;
    }
    
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 1) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn @username [–ø—Ä–∏—á–∏–Ω–∞]');
      return;
    }
    
    const targetUsername = args[0].replace('@', '');
    const reason = args.slice(1).join(' ') || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª';
    
    const targetUser = await User.findOne({ username: targetUsername }).maxTimeMS(3000);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    targetUser.warnings += 1;
    setImmediate(() => updateUserPoints(targetUser, config.pointsSettings.spamPenalty, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'));
    
    if (targetUser.warnings >= config.moderation.warningThreshold) {
      const muteUntil = new Date(Date.now() + config.moderation.muteDurationMinutes * 60 * 1000);
      targetUser.is_muted = true;
      targetUser.mute_until = muteUntil;
      targetUser.warnings = 0;
      
      await ctx.restrictChatMember(targetUser.user_id, {
        permissions: { can_send_messages: false },
        until_date: Math.floor(muteUntil.getTime() / 1000)
      }).catch(() => {});
      
      await ctx.reply(`üîá @${targetUsername} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ ${config.moderation.muteDurationMinutes} –º–∏–Ω—É—Ç –∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è.`);
      setImmediate(() => logAction(targetUser.user_id, ctx.from.id, 'mute', `–ú—É—Ç –∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${reason}`));
    } else {
      const warningsLeft = config.moderation.warningThreshold - targetUser.warnings;
      await ctx.reply(
        `‚ö†Ô∏è @${targetUsername} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞: ${reason}\n` +
        `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${targetUser.warnings}/${config.moderation.warningThreshold}\n` +
        `–î–æ –º—É—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å: ${warningsLeft}`
      );
      setImmediate(() => logAction(targetUser.user_id, ctx.from.id, 'warning', reason));
    }
    
    setImmediate(async () => {
      try {
        await targetUser.save();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', error);
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã warn:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ mute
bot.command('mute', async (ctx) => {
  try {
    if (!await isAdmin(ctx, ctx.from.id)) {
      return;
    }
    
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 1) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute @username [–≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö] [–ø—Ä–∏—á–∏–Ω–∞]');
      return;
    }
    
    const targetUsername = args[0].replace('@', '');
    const muteDuration = parseInt(args[1]) || config.moderation.muteDurationMinutes;
    const reason = args.slice(2).join(' ') || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª';
    
    const targetUser = await User.findOne({ username: targetUsername }).maxTimeMS(3000);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    const muteUntil = new Date(Date.now() + muteDuration * 60 * 1000);
    targetUser.is_muted = true;
    targetUser.mute_until = muteUntil;
    
    setImmediate(async () => {
      try {
        await targetUser.save();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—É—Ç–∞:', error);
      }
    });
    
    await ctx.restrictChatMember(targetUser.user_id, {
      permissions: { can_send_messages: false },
      until_date: Math.floor(muteUntil.getTime() / 1000)
    }).catch(() => {});
    
    await ctx.reply(`üîá @${targetUsername} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ ${muteDuration} –º–∏–Ω—É—Ç. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    setImmediate(() => logAction(targetUser.user_id, ctx.from.id, 'mute', reason, { duration: muteDuration }));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã mute:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ unmute
bot.command('unmute', async (ctx) => {
  try {
    if (!await isAdmin(ctx, ctx.from.id)) {
      return;
    }
    
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 1) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute @username');
      return;
    }
    
    const targetUsername = args[0].replace('@', '');
    
    const targetUser = await User.findOne({ username: targetUsername }).maxTimeMS(3000);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    targetUser.is_muted = false;
    targetUser.mute_until = null;
    
    setImmediate(async () => {
      try {
        await targetUser.save();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º—É—Ç–∞:', error);
      }
    });
    
    await ctx.restrictChatMember(targetUser.user_id, {
      permissions: {
        can_send_messages: true,
        can_send_media_messages: true,
        can_send_polls: true,
        can_send_other_messages: true,
        can_add_web_page_previews: true
      }
    }).catch(() => {});
    
    await ctx.reply(`üîì –° @${targetUsername} —Å–Ω—è—Ç –º—É—Ç.`);
    setImmediate(() => logAction(targetUser.user_id, ctx.from.id, 'unmute', '–ú—É—Ç —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã unmute:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ ban
bot.command('ban', async (ctx) => {
  try {
    if (!await isAdmin(ctx, ctx.from.id)) {
      return;
    }
    
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 1) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username [–ø—Ä–∏—á–∏–Ω–∞]');
      return;
    }
    
    const targetUsername = args[0].replace('@', '');
    const reason = args.slice(1).join(' ') || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª';
    
    const targetUser = await User.findOne({ username: targetUsername }).maxTimeMS(3000);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    targetUser.is_banned = true;
    
    setImmediate(async () => {
      try {
        await targetUser.save();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–Ω–∞:', error);
      }
    });
    
    await ctx.kickChatMember(targetUser.user_id).catch(() => {});
    
    await ctx.reply(`üö´ @${targetUsername} –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    setImmediate(() => logAction(targetUser.user_id, ctx.from.id, 'ban', reason));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã ban:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ unwarn
bot.command('unwarn', async (ctx) => {
  try {
    if (!await isAdmin(ctx, ctx.from.id)) {
      return;
    }
    
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 1) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unwarn @username');
      return;
    }
    
    const targetUsername = args[0].replace('@', '');
    
    const targetUser = await User.findOne({ username: targetUsername }).maxTimeMS(3000);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    if (targetUser.warnings === 0) {
      await ctx.reply('‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.');
      return;
    }
    
    targetUser.warnings = Math.max(0, targetUser.warnings - 1);
    
    setImmediate(async () => {
      try {
        await targetUser.save();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', error);
      }
    });
    
    await ctx.reply(`‚úÖ –° @${targetUsername} —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${targetUser.warnings}`);
    setImmediate(() => logAction(targetUser.user_id, ctx.from.id, 'unwarn', '–°–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã unwarn:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ addpoints
bot.command('addpoints', async (ctx) => {
  try {
    if (!await isAdmin(ctx, ctx.from.id)) {
      return;
    }
    
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 2) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpoints @username [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]');
      return;
    }
    
    const targetUsername = args[0].replace('@', '');
    const points = parseInt(args[1]);
    
    if (isNaN(points)) {
      await ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.');
      return;
    }
    
    const targetUser = await User.findOne({ username: targetUsername }).maxTimeMS(3000);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    setImmediate(() => updateUserPoints(targetUser, points, '–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'));
    
    await ctx.reply(`‚úÖ @${targetUsername} –ø–æ–ª—É—á–∏–ª ${points} –±–∞–ª–ª–æ–≤. –í—Å–µ–≥–æ: ${targetUser.points + points}`);
    setImmediate(() => logAction(targetUser.user_id, ctx.from.id, 'addpoints', `–î–æ–±–∞–≤–ª–µ–Ω–æ ${points} –±–∞–ª–ª–æ–≤`));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã addpoints:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ setlevel
bot.command('setlevel', async (ctx) => {
  try {
    if (!await isAdmin(ctx, ctx.from.id)) {
      return;
    }
    
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 2) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlevel @username [—É—Ä–æ–≤–µ–Ω—å]');
      return;
    }
    
    const targetUsername = args[0].replace('@', '');
    const level = parseInt(args[1]);
    
    if (isNaN(level) || level < 1 || level > 8) {
      await ctx.reply('‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 8.');
      return;
    }
    
    const targetUser = await User.findOne({ username: targetUsername }).maxTimeMS(3000);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    targetUser.level = level;
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const levelThreshold = config.levelThresholds.find(t => t.level === level);
    if (levelThreshold && targetUser.points < levelThreshold.points) {
      targetUser.points = levelThreshold.points;
    }
    
    setImmediate(async () => {
      try {
        await targetUser.save();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:', error);
      }
    });
    
    const levelName = config.levelNames[level] || `–£—Ä–æ–≤–µ–Ω—å ${level}`;
    await ctx.reply(`‚úÖ @${targetUsername} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${level} - ${levelName}`);
    setImmediate(() => logAction(targetUser.user_id, ctx.from.id, 'setlevel', `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${level}`));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã setlevel:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É—Ä–æ–≤–Ω—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ getstats (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('getstats', async (ctx) => {
  try {
    if (!await isAdmin(ctx, ctx.from.id)) {
      return;
    }
    
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 1) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getstats @username');
      return;
    }
    
    const targetUsername = args[0].replace('@', '');
    
    const targetUser = await User.findOne({ username: targetUsername }).maxTimeMS(3000);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    const levelName = config.levelNames[targetUser.level] || `–£—Ä–æ–≤–µ–Ω—å ${targetUser.level}`;
    const statsText = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @${targetUsername}:**\n\n` +
      `üÜî ID: ${targetUser.user_id}\n` +
      `‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${targetUser.level} - ${levelName}\n` +
      `üíé –ë–∞–ª–ª—ã: ${targetUser.points}\n` +
      `üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${targetUser.messages_count}\n` +
      `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${targetUser.warnings}\n` +
      `üîá –í –º—É—Ç–µ: ${targetUser.is_muted ? '–î–∞' : '–ù–µ—Ç'}\n` +
      `üö´ –ó–∞–±–∞–Ω–µ–Ω: ${targetUser.is_banned ? '–î–∞' : '–ù–µ—Ç'}\n` +
      `‚úÖ –ü—Ä–æ—à—ë–ª –∫–∞–ø—á—É: ${targetUser.captcha_verified ? '–î–∞' : '–ù–µ—Ç'}\n` +
      `üìÖ –í –≥—Ä—É–ø–ø–µ —Å: ${targetUser.join_date.toLocaleDateString('ru-RU')}\n` +
      `üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${targetUser.last_activity.toLocaleDateString('ru-RU')}`;
    
    await ctx.reply(statsText);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã getstats:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => {
    console.log('üöÄ Web3 Guild Bot –∑–∞–ø—É—â–µ–Ω! (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    console.log('üìä –ú–æ–¥–µ—Ä–∞—Ü–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞');
    console.log('üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞');
    console.log('üîê CAPTCHA: ‚úÖ –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
    console.log('üîó –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫: ‚úÖ 14 –¥–Ω–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö');
    console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
  })
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
    process.exit(1);
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));