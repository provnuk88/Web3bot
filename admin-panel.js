const express = require('express');
const mongoose = require('mongoose');
const config = require('./config');
require('dotenv').config();

const app = express();
const PORT = process.env.ADMIN_PORT || 3000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/web3_guild_bot', {
  maxPoolSize: 5,
  serverSelectionTimeoutMS: 5000,
  socketTimeoutMS: 45000,
  bufferCommands: false,
  bufferMaxEntries: 0
})
  .then(() => console.log('‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ MongoDB'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// Middleware
app.use(express.json());
app.use(express.static('public'));

// –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  req.setTimeout(10000); // 10 —Å–µ–∫—É–Ω–¥
  res.setTimeout(10000);
  next();
});

// –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
const User = mongoose.model('User');
const Log = mongoose.model('Log');

// –ü—Ä–æ—Å—Ç–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/', (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web3 Guild Bot - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #1a1a1a;
            color: #fff;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        h1 {
            text-align: center;
            color: #4CAF50;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .stat-card {
            background: #2a2a2a;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            border: 1px solid #333;
        }
        .stat-card h3 {
            margin: 0 0 10px 0;
            color: #4CAF50;
        }
        .stat-card .value {
            font-size: 2em;
            font-weight: bold;
        }
        .loading {
            color: #ff9800;
        }
        .error {
            color: #f44336;
        }
        table {
            width: 100%;
            background: #2a2a2a;
            border-radius: 10px;
            overflow: hidden;
            margin: 20px 0;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #333;
        }
        th {
            background: #333;
            color: #4CAF50;
        }
        .level {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            background: #4CAF50;
            color: #fff;
        }
        .warning {
            color: #ff9800;
        }
        .muted {
            color: #f44336;
        }
        .search-box {
            width: 100%;
            padding: 10px;
            margin: 20px 0;
            background: #2a2a2a;
            border: 1px solid #333;
            color: #fff;
            border-radius: 5px;
            font-size: 16px;
        }
        .logs {
            max-height: 400px;
            overflow-y: auto;
            background: #2a2a2a;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .log-entry {
            padding: 10px;
            margin: 5px 0;
            background: #1a1a1a;
            border-radius: 5px;
            border-left: 3px solid #4CAF50;
        }
        .refresh-btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-right: 10px;
        }
        .refresh-btn:hover {
            background: #45a049;
        }
        .refresh-btn:disabled {
            background: #666;
            cursor: not-allowed;
        }
        .status {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            text-align: center;
        }
        .status.success {
            background: #4CAF50;
        }
        .status.error {
            background: #f44336;
        }
        .status.warning {
            background: #ff9800;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Web3 Guild Bot - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
        
        <div id="status" class="status" style="display: none;"></div>
        
        <button class="refresh-btn" onclick="refreshAll()" id="refreshBtn">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
        <button class="refresh-btn" onclick="clearCache()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à</button>
        
        <div class="stats-grid" id="stats">
            <div class="stat-card">
                <h3>üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                <div class="value loading" id="totalUsers">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            <div class="stat-card">
                <h3>‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è</h3>
                <div class="value loading" id="activeToday">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            <div class="stat-card">
                <h3>üîá –í –º—É—Ç–µ</h3>
                <div class="value loading" id="mutedUsers">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            <div class="stat-card">
                <h3>üö´ –ó–∞–±–∞–Ω–µ–Ω–æ</h3>
                <div class="value loading" id="bannedUsers">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
        </div>

        <h2>üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
        <input type="text" class="search-box" id="searchBox" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..." onkeyup="debounceSearch()">

        <h2>üìä –¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
        <table>
            <thead>
                <tr>
                    <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                    <th>–£—Ä–æ–≤–µ–Ω—å</th>
                    <th>–ë–∞–ª–ª—ã</th>
                    <th>–°–æ–æ–±—â–µ–Ω–∏–π</th>
                    <th>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                </tr>
            </thead>
            <tbody id="topUsers">
                <tr><td colspan="6" class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>
            </tbody>
        </table>

        <h2>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏</h2>
        <div class="logs" id="moderationLogs">
            <div class="log-entry loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
        </div>
    </div>

    <script>
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        let isLoading = false;
        let searchTimeout;
        let lastSearchQuery = '';
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        function showStatus(message, type = 'success') {
            const statusDiv = document.getElementById('status');
            statusDiv.textContent = message;
            statusDiv.className = \`status \${type}\`;
            statusDiv.style.display = 'block';
            
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 3000);
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fetch —Å timeout
        async function safeFetch(url, timeout = 5000) {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), timeout);
            
            try {
                const response = await fetch(url, {
                    signal: controller.signal
                });
                clearTimeout(timeoutId);
                
                if (!response.ok) {
                    throw new Error(\`HTTP \${response.status}: \${response.statusText}\`);
                }
                
                return await response.json();
            } catch (error) {
                clearTimeout(timeoutId);
                if (error.name === 'AbortError') {
                    throw new Error('–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
                }
                throw error;
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async function loadStats() {
            try {
                const data = await safeFetch('/api/stats');
                
                document.getElementById('totalUsers').textContent = data.totalUsers || 0;
                document.getElementById('totalUsers').className = 'value';
                
                document.getElementById('activeToday').textContent = data.activeToday || 0;
                document.getElementById('activeToday').className = 'value';
                
                document.getElementById('mutedUsers').textContent = data.mutedUsers || 0;
                document.getElementById('mutedUsers').className = 'value';
                
                document.getElementById('bannedUsers').textContent = data.bannedUsers || 0;
                document.getElementById('bannedUsers').className = 'value';
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message, 'error');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
                ['totalUsers', 'activeToday', 'mutedUsers', 'bannedUsers'].forEach(id => {
                    const element = document.getElementById(id);
                    element.textContent = '–û—à–∏–±–∫–∞';
                    element.className = 'value error';
                });
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async function loadTopUsers() {
            try {
                const users = await safeFetch('/api/top-users');
                
                const tbody = document.getElementById('topUsers');
                
                if (users.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="6">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>';
                    return;
                }
                
                tbody.innerHTML = users.map(user => \`
                    <tr>
                        <td>@\${user.username || user.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</td>
                        <td><span class="level">\${user.levelName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span></td>
                        <td>\${user.points || 0}</td>
                        <td>\${user.messages_count || 0}</td>
                        <td class="\${user.warnings > 0 ? 'warning' : ''}">\${user.warnings || 0}</td>
                        <td class="\${user.is_muted ? 'muted' : ''}">\${user.is_muted ? 'üîá –ú—É—Ç' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}</td>
                    </tr>
                \`).join('');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞:', error);
                showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + error.message, 'error');
                
                const tbody = document.getElementById('topUsers');
                tbody.innerHTML = '<tr><td colspan="6" class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</td></tr>';
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
        async function loadLogs() {
            try {
                const logs = await safeFetch('/api/logs');
                
                const logsDiv = document.getElementById('moderationLogs');
                
                if (logs.length === 0) {
                    logsDiv.innerHTML = '<div class="log-entry">–ù–µ—Ç –ª–æ–≥–æ–≤</div>';
                    return;
                }
                
                logsDiv.innerHTML = logs.map(log => \`
                    <div class="log-entry">
                        <strong>\${new Date(log.timestamp).toLocaleString('ru-RU')}</strong><br>
                        –î–µ–π—Å—Ç–≤–∏–µ: <strong>\${log.action || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong><br>
                        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: \${log.user_id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
                        –ê–¥–º–∏–Ω ID: \${log.admin_id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
                        –ü—Ä–∏—á–∏–Ω–∞: \${log.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                    </div>
                \`).join('');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
                showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: ' + error.message, 'error');
                
                const logsDiv = document.getElementById('moderationLogs');
                logsDiv.innerHTML = '<div class="log-entry error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤</div>';
            }
        }

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å debounce
        function debounceSearch() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(searchUsers, 500); // 500ms –∑–∞–¥–µ—Ä–∂–∫–∞
        }

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async function searchUsers() {
            const query = document.getElementById('searchBox').value.trim();
            
            if (query.length < 2) {
                if (lastSearchQuery !== '') {
                    lastSearchQuery = '';
                    loadTopUsers(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                }
                return;
            }
            
            if (query === lastSearchQuery) {
                return; // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            }
            
            lastSearchQuery = query;
            
            try {
                const users = await safeFetch(\`/api/search?q=\${encodeURIComponent(query)}\`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
                const tbody = document.getElementById('topUsers');
                
                if (users.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="6">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
                    return;
                }
                
                tbody.innerHTML = users.map(user => \`
                    <tr>
                        <td>@\${user.username || user.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</td>
                        <td><span class="level">\${user.levelName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span></td>
                        <td>\${user.points || 0}</td>
                        <td>\${user.messages_count || 0}</td>
                        <td class="\${user.warnings > 0 ? 'warning' : ''}">\${user.warnings || 0}</td>
                        <td class="\${user.is_muted ? 'muted' : ''}">\${user.is_muted ? 'üîá –ú—É—Ç' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}</td>
                    </tr>
                \`).join('');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
                showStatus('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message, 'error');
            }
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        async function refreshAll() {
            if (isLoading) return;
            
            isLoading = true;
            const refreshBtn = document.getElementById('refreshBtn');
            refreshBtn.disabled = true;
            refreshBtn.textContent = '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
            
            try {
                await Promise.all([
                    loadStats(),
                    loadTopUsers(),
                    loadLogs()
                ]);
                
                showStatus('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
            } catch (error) {
                showStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            } finally {
                isLoading = false;
                refreshBtn.disabled = false;
                refreshBtn.textContent = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
            }
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
        function clearCache() {
            if ('caches' in window) {
                caches.keys().then(function(names) {
                    for (let name of names) {
                        caches.delete(name);
                    }
                });
            }
            
            // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            lastSearchQuery = '';
            document.getElementById('searchBox').value = '';
            
            showStatus('–ö–µ—à –æ—á–∏—â–µ–Ω', 'success');
            refreshAll();
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.onload = () => {
            refreshAll();
            
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞)
            setInterval(() => {
                if (!document.hidden && !isLoading) {
                    refreshAll();
                }
            }, 30000);
        };
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && !isLoading) {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                refreshAll();
            }
        });
    </script>
</body>
</html>
  `);
});

// API endpoints —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
app.get('/api/stats', async (req, res) => {
  try {
    const timeout = 5000; // 5 —Å–µ–∫—É–Ω–¥
    
    const [totalUsers, activeToday, mutedUsers, bannedUsers] = await Promise.all([
      Promise.race([
        User.countDocuments().exec(),
        new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), timeout))
      ]),
      Promise.race([
        (() => {
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          return User.countDocuments({ last_activity: { $gte: today } }).exec();
        })(),
        new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), timeout))
      ]),
      Promise.race([
        User.countDocuments({ is_muted: true }).exec(),
        new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), timeout))
      ]),
      Promise.race([
        User.countDocuments({ is_banned: true }).exec(),
        new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), timeout))
      ])
    ]);
    
    res.json({
      totalUsers: totalUsers || 0,
      activeToday: activeToday || 0,
      mutedUsers: mutedUsers || 0,
      bannedUsers: bannedUsers || 0
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API stats:', error);
    res.status(500).json({ 
      error: error.message,
      totalUsers: 0,
      activeToday: 0,
      mutedUsers: 0,
      bannedUsers: 0
    });
  }
});

app.get('/api/top-users', async (req, res) => {
  try {
    const users = await Promise.race([
      User.find({ is_banned: false })
        .sort({ points: -1 })
        .limit(10)
        .lean()
        .exec(),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))
    ]);
    
    const usersWithLevels = users.map(user => ({
      ...user,
      levelName: config.levelNames[user.level] || `–£—Ä–æ–≤–µ–Ω—å ${user.level}`
    }));
    
    res.json(usersWithLevels);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API top-users:', error);
    res.status(500).json([]);
  }
});

app.get('/api/logs', async (req, res) => {
  try {
    const logs = await Promise.race([
      Log.find()
        .sort({ timestamp: -1 })
        .limit(20)
        .lean()
        .exec(),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))
    ]);
    
    res.json(logs);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API logs:', error);
    res.status(500).json([]);
  }
});

app.get('/api/search', async (req, res) => {
  try {
    const query = req.query.q;
    
    if (!query || query.length < 2) {
      return res.json([]);
    }
    
    const users = await Promise.race([
      User.find({
        $or: [
          { username: new RegExp(query, 'i') },
          { first_name: new RegExp(query, 'i') }
        ]
      })
      .limit(10)
      .lean()
      .exec(),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 5000))
    ]);
    
    const usersWithLevels = users.map(user => ({
      ...user,
      levelName: config.levelNames[user.level] || `–£—Ä–æ–≤–µ–Ω—å ${user.level}`
    }));
    
    res.json(usersWithLevels);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API search:', error);
    res.status(500).json([]);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  res.status(404).json({ error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
  console.log(`üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://localhost:${PORT}`);
  console.log(`‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
  });
});

process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
  });
});